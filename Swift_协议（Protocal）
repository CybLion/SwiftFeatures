Swift_协议（Protocal）

##定义

协议：顾名思义就是一套规则，一套你执行中遵循的规则方法。在Swift 中协议可以被类，枚举，结构体实现。

###协议的语法

<pre lang=swift>
 	protocol SomeProtocol {
  
	} 
	多协议遵守
	struct SomeStructure: FirstProtocol, AnotherProtocol {
 
	} 

</pre>
##属性要求
Swift 中 协议能够让属性统一在遵守者里必须含有，同时可以设置他们的可读性。
这点和oc 有些不同，在oc中仅仅方法。

<pre lang=swift>
	protocol SomeProtocol {
	    var mustBeSettable: Int { get set }
	    var doesNotNeedToBeSettable: Int { get }
	}
</pre>

##方法要求

遵循者必须执行协议的方法，这个是默认的，oc中是可选执行，可是在Swift 中是必须执行，如果想可选必须在方法前方加上@optional 。方法必须在可选协议中，可选协议前方必须有关键字@objc。

其他情况都是必须执行的方法，前方不用任何的修饰。不需要显示方法内容，仅仅写下方法体就可以了，这点和oc很想哦

<pre lang=swift>
protocol SomeProtocol {
    class func someTypeMethod()
}

protocol RandomNumberGenerator {
    func random() -> Double
} 

</pre>

可以方法中还有一个修饰就是mutating 表示这个方法会修改类型本身的属性和类型，就是self 的本身。

##协议类型

这个定义有点奇怪，因为协议本身不完成什么功能，是个方法列表，变量常量集合。这写可以看出协议的本质，那就是一些动作或者事件的列表。在oc 中开始对块编程的支持，协议的用途越来越专业。在swift中闭包和函数嵌套，都可以很好的解决这个问题。

在协议做类型的地方，oc 和swift 没有什么太多的不同。
作为参数的协议类型，可以传递遵循协议的遵循者作为参数传递，此时已经对传递过来的类型必须经过初始化，否则会警告类型传递错误。

##协议扩展

这个扩展让本来不遵循协议的遵循者，重新可以遵循，这样在代码扩展的时候就会很好的避免在源代码添加新协议。这个特性也是类扩展的特性。

##协议gu